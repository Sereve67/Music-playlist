#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define a structure for each song in the playlist
struct Song {
    char title[50];
    char artist[50];
};

// Define a stack structure
#define MAX_SONGS 100 // Maximum number of songs in the stack

struct Stack {
    struct Song songs[MAX_SONGS];
    int top;
};

// Function to initialize the stack
void initStack(struct Stack *stack) {
    stack->top = -1;
}

// Function to check if the stack is full
int isFull(struct Stack *stack) {
    return stack->top == MAX_SONGS - 1;
}

// Function to check if the stack is empty
int isEmpty(struct Stack *stack) {
    return stack->top == -1;
}

// Function to push a song onto the stack
void push(struct Stack *stack, char *title, char *artist) {
    if (isFull(stack)) {
        printf("The playlist is full, cannot add more songs.\n");
        return;
    }
    stack->top++;
    strcpy(stack->songs[stack->top].title, title);
    strcpy(stack->songs[stack->top].artist, artist);
    printf("Song added to playlist.\n");
}

// Function to pop a song from the stack
struct Song pop(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("The playlist is empty.\n");
        struct Song emptySong = {"", ""};
        return emptySong; // Return an empty song
    }
    return stack->songs[stack->top--];
}

// Function to display all songs in the playlist
void displayPlaylist(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("The playlist is empty.\n");
        return;
    }
    printf("Current Playlist:\n");
    for (int i = stack->top; i >= 0; i--) {
        printf("Song %d: %s by %s\n", i + 1, stack->songs[i].title, stack->songs[i].artist);
    }
}

// Function to delete the top song from the playlist
void deleteSong(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("The playlist is empty.\n");
        return;
    }
    struct Song deletedSong = pop(stack);
    printf("Deleted song: %s\n", deletedSong.title);
}

int main() {
    struct Stack playlist;
    initStack(&playlist);
    int choice;
    char title[50], artist[50];

    do {
        printf("\n1. Add Song\n2. Display Playlist\n3. Delete Top Song\n4. Exit\nChoose an option: ");
        scanf("%d", &choice);
        getchar(); // to consume the newline character

        switch (choice) {
            case 1:
                printf("Enter song title: ");
                fgets(title, sizeof(title), stdin);
                title[strcspn(title, "\n")] = '\0'; // remove newline character

                printf("Enter artist name: ");
                fgets(artist, sizeof(artist), stdin);
                artist[strcspn(artist, "\n")] = '\0'; // remove newline character

                push(&playlist, title, artist);
                break;

            case 2:
                displayPlaylist(&playlist);
                break;

            case 3:
                deleteSong(&playlist);
                break;

            case 4:
                printf("Exiting...\n");
                break;

            default:
                printf("Invalid choice. Please try again.\n");
                break;
        }
    } while (choice != 4);

    return 0;
}

